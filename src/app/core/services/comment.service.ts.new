import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of, catchError } from 'rxjs';
import { ForumComment } from '@core/Models/forumComment';

@Injectable({
  providedIn: 'root'
})
export class CommentService {
  // L'URL de base pour les forums
  private apiUrl = 'http://localhost:8080/api/forums';
  private baseUrl = 'http://localhost:8080/api/comments';

  constructor(private http: HttpClient) {}

  // Helper to create headers with auth token if available
  private getHeaders(): HttpHeaders {
    const token = localStorage.getItem('authToken');
    let headers = new HttpHeaders({
      'Content-Type': 'application/json',
    });
    
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    
    return headers;
  }

  addComment(forumId: number, comment: any): Observable<any> {
    return this.http.post(`${this.apiUrl}/${forumId}/comments`, comment, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error('Error adding comment:', error);
        throw error;
      })
    );
  }

  deleteComment(commentId: number) {
    return this.http.delete(`${this.baseUrl}/forums/:forumId/${commentId}`, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error('Error deleting comment:', error);
        throw error;
      })
    );
  }

  updateComment(commentId: number, updatedComment: any) {
    return this.http.put(`${this.baseUrl}/forums/:forumId/${commentId}`, updatedComment, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error('Error updating comment:', error);
        throw error;
      })
    );
  }
  
  // üîÑ R√©cup√©rer tous les commentaires
  getAll(): Observable<ForumComment[]> {
    return this.http.get<ForumComment[]>(`${this.apiUrl}/comments`, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error('Error fetching all comments:', error);
        return of([]);
      })
    );
  }

  // üîç R√©cup√©rer un commentaire par son ID
  getById(id: number): Observable<ForumComment> {
    return this.http.get<ForumComment>(`${this.apiUrl}/comments/${id}`, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error(`Error fetching comment ${id}:`, error);
        throw error;
      })
    );
  }

  // üìù Cr√©er un nouveau commentaire
  create(comment: ForumComment, forumId: number): Observable<ForumComment> {
    // L'URL est modifi√©e pour correspondre √† l'endpoint /forums/{forumId}/comments
    return this.http.post<ForumComment>(`${this.apiUrl}/${forumId}/comments`, comment, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error('Error creating comment:', error);
        throw error;
      })
    );
  }

  // üîç R√©cup√©rer les commentaires par forumId
  getByForumId(forumId: number): Observable<ForumComment[]> {
    console.log(`Fetching comments for forum ${forumId}`);
    return this.http.get<ForumComment[]>(`${this.apiUrl}/${forumId}/comments`, {
      headers: this.getHeaders()
    }).pipe(
      catchError(error => {
        console.error(`Error fetching comments for forum ${forumId}:`, error);
        // Return empty array to prevent component errors
        return of([]);
      })
    );
  }
}
